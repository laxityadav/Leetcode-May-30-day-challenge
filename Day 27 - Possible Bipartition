class Solution {
    HashMap<Integer, Integer> map;
    ArrayList<Integer> graph[];
    public boolean dfs(int val)
    {       
        if(!map.containsKey(val))
            map.put(val, 1);
        int a = map.get(val), b=1;
        if(a==1) b=2;
        for(int i=0;i<graph[val].size();i++)
        {
            int temp = graph[val].get(i);
            if(map.containsKey(temp)){
                int k = map.get(temp);
                if(k==a)
                    return false;
                    
            }
            else{
                map.put(temp, b);
                if(!dfs(temp))
                    return false;                    
            }
        }
        return true;
    }
    public boolean possibleBipartition(int N, int[][] dislikes) {
       
        graph = new ArrayList[N+1];
        for(int i=1;i<=N;i++)
            graph[i] = new ArrayList();
        map = new HashMap<>();
        
        for(int []edge:dislikes)
        {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        
        for(int i=1;i<=N;i++)
           if(!map.containsKey(i) && !dfs(i))
               return false;
        //System.out.println(map);
        return true;
    }
}
