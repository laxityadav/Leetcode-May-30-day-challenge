class Solution {
    public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm) 
    { 
        List<Map.Entry<String, Integer> > list = 
               new LinkedList<Map.Entry<String, Integer> >(hm.entrySet()); 
  
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() { 
            public int compare(Map.Entry<String, Integer> o1,  
                               Map.Entry<String, Integer> o2) 
            { 
                return -(o1.getValue()).compareTo(o2.getValue());
            } 
        }); 

        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>(); 
        for (Map.Entry<String, Integer> aa : list) { 
            temp.put(aa.getKey(), aa.getValue()); 
        } 
        return temp; 
    } 
    public String frequencySort(String s) {
        ArrayList<Pair> list = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        
        for(int i=0;i<s.length();i++)
        {
            char ch = s.charAt(i);
            if(map.containsKey(ch+""))
                map.put(ch+"", map.get(ch+"")+1);
            else
                map.put(ch+"", 1);
        }
        Map<String, Integer> hm1 = sortByValue(map);
        //System.out.println(hm1);

        String ans="";
        for (Map.Entry<String, Integer> en : hm1.entrySet()) { 
            int val=en.getValue();
            String key=en.getKey();
            while(val-->0)
            {
                ans+=key;
            }
        } 
        return ans;
    }
}



Python Version
class Solution(object):
    def frequencySort(self, s):
        """
        :type s: str
        :rtype: str
        """
        n1=[]
        n=dict()
        s1=list(set(s))
        f=[0]*len(s1)
        for i in range(len(s1)):
            f[i]=s.count(s1[i])
      
        
        for i in range(len(s1)):
            n[s1[i]]=f[i]
        n=sorted(n.items(), key=lambda kv: kv[1],reverse=True)
        for i in range(len(n)):
            d=n[i][1]
            while(d>0):
                n1.append(n[i][0])
                d-=1
        return "".join(n1)
# Second
class Solution(object):
    def frequencySort(self, s):
        """
        :type s: str
        :rtype: str
        """
      
        f=Counter(s)
        return "".join(map(lambda i :i[0]*i[1],f.most_common()))
    
