/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans = 0;
    int count=0;
    public void dfs(TreeNode root, int k)
    {
        if(root == null || count>k)
            return;
        
        dfs(root.left, k);
        count++;
        if(count==k){
            ans = root.val;
            return;
        }
            
        dfs(root.right, k);
    }
    public int kthSmallest(TreeNode root, int k) {
        count=0;        
        dfs(root, k);
        return ans;
    }
}

Python Version
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
def bfs(self,root,q):
    q.append(root.val)
    if(root.left!=None):
        bfs(self,root.left,q)
    if(root.right!=None):
        bfs(self,root.right,q)    
        
class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        if(root==None):
            return
        q=[]
        bfs(self,root,q)
        q=sorted(q)
        
        return q[k-1]
#Second method using dfs inorder traversal

def dfs(self,root,q):
    if(root.left!=None):
        dfs(self,root.left,q)
    q.append(root.val)    
    if(root.right!=None):
        dfs(self,root.right,q)    
        
class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        if(root==None):
            return
        q=[]
        dfs(self,root,q)
        
        
        return q[k-1]        
